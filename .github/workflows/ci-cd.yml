name: CI/CD Workflow

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: [self-hosted, linux, x64]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Image Tag
        run: echo "TAG=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build and Tag Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/simple-argocd-app:${TAG} \
                       -t ${{ secrets.DOCKER_USERNAME }}/simple-argocd-app:latest .

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/simple-argocd-app:${TAG}
          docker push ${{ secrets.DOCKER_USERNAME }}/simple-argocd-app:latest

      - name: Patch image in Kubernetes manifests
        run: |
          sed -i "s|simple-argocd-app:.*|simple-argocd-app:${TAG}|" k8s/dev/deployment.yaml
          sed -i "s|simple-argocd-app:.*|simple-argocd-app:${TAG}|" k8s/production/deployment.yaml

      - name: Commit updated manifests
        env:
          REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add k8s/dev/deployment.yaml k8s/production/deployment.yaml
          git commit -m "CI: update image tag to ${TAG}" || echo "No changes to commit"
          git config --unset-all http.https://github.com/.extraheader || true
          git remote set-url origin https://x-access-token:${REPO_TOKEN}@github.com/${{ github.repository }}
          git push origin main

      - name: Install Argo CD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Sync ArgoCD Applications
        env:
          ARGOCD_AUTH_TOKEN: ${{ secrets.ARGOCD_AUTH_TOKEN }}
        run: |
          argocd login 192.168.0.171:32443 --username admin --password "$ARGOCD_AUTH_TOKEN" --insecure
          argocd app sync simple-app-dev
          argocd app sync simple-app-prod

